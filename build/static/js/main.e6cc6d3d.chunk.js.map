{"version":3,"sources":["services/poke-api-service.js","components/pokemon-card/index.js","components/pokemon-card/pokemon-card.js","components/pokemon-details/index.js","components/pokemon-details/pokemon-details.js","components/App/index.js","components/App/app.js","serviceWorker.js","index.js"],"names":["PokeAPIService","baseURL","amount","pokemons","fetch","this","then","response","json","results","map","element","url","pokemonURLs","a","async","Promise","all","getSinglePokemonData","pokemonList","data","pokemonData","mapSinglePokemonData","id","name","types","stats","weight","moves","sprites","item","type","attack","base_stat","defense","hp","spAttack","spDefense","speed","totalMoves","length","image","front_default","PokemonCard","props","selectedPokemonID","className","onClick","showDetails","src","alt","key","Math","random","PokemonDetails","join","App","state","chunkSize","filteredPokemons","desplayDetails","selectedPokemon","currentFilter","selectRef","React","createRef","getData","pokeAPIService","getDataChunk","setState","applyFilter","pokemon","loadMore","prev","updateFilter","current","value","filtered","filter","some","Fragment","onChange","ref","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e6cc6d3d.chunk.js","sourcesContent":["class PokeAPIService {\r\n  baseURL = 'https://pokeapi.co/api/v2/';\r\n  \r\n  async getDataChunk(amount) {\r\n    let pokemons = [];\r\n    \r\n    await fetch(`${this.baseURL}pokemon/?limit=${amount}`)\r\n      .then(response => response.json())\r\n      .then(({ results }) => results.map(element => element.url))\r\n      .then(async (pokemonURLs) => {\r\n        await Promise.all(pokemonURLs.map(url => this.getSinglePokemonData(url)))\r\n          .then(pokemonList => {\r\n            pokemons = pokemonList;\r\n          });\r\n      });\r\n\r\n    return pokemons;\r\n  };\r\n\r\n  async getSinglePokemonData(url) {\r\n    const pokemonData = await fetch(url)\r\n      .then(data => data.json());\r\n\r\n    return this.mapSinglePokemonData(pokemonData);\r\n  };\r\n\r\n  mapSinglePokemonData({ id, name, types, stats, weight, moves, sprites }) {\r\n    return {\r\n      id,\r\n      name,\r\n      weight,\r\n      types: types.map(item => item.type.name),\r\n      attack: stats[4].base_stat,\r\n      defense: stats[3].base_stat,\r\n      hp: stats[5].base_stat,\r\n      spAttack: stats[2].base_stat,\r\n      spDefense: stats[1].base_stat,\r\n      speed: stats[0].base_stat,\r\n      totalMoves: moves.length,\r\n      image: sprites.front_default\r\n    }\r\n  }\r\n};\r\n\r\nexport default PokeAPIService;","import PokemonCard from './pokemon-card';\r\n\r\nexport default PokemonCard;","import React from 'react';\r\nimport './pokemon-card.css';\r\n\r\nconst PokemonCard = (props) => {\r\n  const { id, name, types, image, selectedPokemonID } = props;\r\n\r\n  return (\r\n    <li \r\n      className={\r\n        selectedPokemonID === id\r\n        ? 'pokemon-card selected'\r\n        : 'pokemon-card'}\r\n        onClick={() => {\r\n          props.showDetails({ ...props });\r\n        }}>\r\n      <div className='pokemon-image'>\r\n        <img src={image} alt={name} />\r\n      </div>\r\n\r\n      <div className='name'>\r\n        <h3 className='name'>{name}</h3>\r\n      </div>\r\n\r\n      <div className='types-list'>\r\n        {\r\n          types.map(type => <span className={type} key={`${Math.random() * id} `}> \r\n            {type}\r\n          </span>)\r\n        }\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default PokemonCard;\r\n\r\n","import PokemonDetails from './pokemon-details';\r\n\r\nexport default PokemonDetails;","import React from 'react';\r\nimport './pokemon-details.css';\r\n\r\nconst PokemonDetails = (props) => {\r\n\r\n  return (\r\n    <div className='details-card'>\r\n      <div className='wrapper'>\r\n        <div className='image'>\r\n          <img src={props.image} alt={props.name} />\r\n        </div>\r\n\r\n        <div className='title'>\r\n          <h3>{props.name} #\r\n          {\r\n              props.id < 100\r\n                ? props.id < 10\r\n                  ? '00'\r\n                  : '0'\r\n                : null\r\n            }\r\n            {props.id}</h3>\r\n        </div>\r\n\r\n        <div className='attributes'>\r\n          <ul>\r\n            <li className='attribute'>\r\n              <div className='stat'>Type</div>\r\n              <div className='value type'>\r\n                {\r\n                  props.types.length > 1\r\n                    ? props.types.join(' &\\n')\r\n                    : props.types\r\n                }\r\n              </div>\r\n            </li>\r\n\r\n            <li className='attribute'>\r\n              <div className='stat'>Attack</div>\r\n              <div className='value'>{props.attack}</div>\r\n            </li>\r\n\r\n            <li className='attribute'>\r\n              <div className='stat'>Defense</div>\r\n              <div className='value'>{props.defense}</div>\r\n            </li>\r\n\r\n            <li className='attribute'>\r\n              <div className='stat'>HP</div>\r\n              <div className='value'>{props.hp}</div>\r\n            </li>\r\n\r\n            <li className='attribute'>\r\n              <div className='stat'>SP Attack</div>\r\n              <div className='value'>{props.spAttack}</div>\r\n            </li>\r\n\r\n            <li className='attribute'>\r\n              <div className='stat'>SP Defense</div>\r\n              <div className='value'>{props.spDefense}</div>\r\n            </li>\r\n\r\n            <li className='attribute'>\r\n              <div className='stat'>Speed</div>\r\n              <div className='value'>{props.speed}</div>\r\n            </li>\r\n\r\n            <li className='attribute'>\r\n              <div className='stat'>Weight</div>\r\n              <div className='value'>{props.weight}</div>\r\n            </li>\r\n\r\n            <li className='attribute'>\r\n              <div className='stat'>Total moves</div>\r\n              <div className='value'>{props.totalMoves}</div>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PokemonDetails;","import App from \"./app\";\r\n\r\nexport default App;","import React from 'react';\nimport './app.css';\n\nimport PokeAPIService from \"../../services/poke-api-service\";\nimport PokemonCard from '../pokemon-card/';\nimport PokemonDetails from '../pokemon-details';\n\nclass App extends React.Component {\n  state = {\n    chunkSize: 12,\n    pokemons: [],\n    filteredPokemons: [],\n    desplayDetails: null,\n    selectedPokemon: null,\n    selectedPokemonID: null,\n    currentFilter: ''\n  };\n\n  constructor() {\n    super();\n    this.pokeAPIService = new PokeAPIService();\n  }\n\n  selectRef = React.createRef();\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  getData = async() => {\n    await this.pokeAPIService.getDataChunk(this.state.chunkSize)\n      .then(results => {\n        this.setState({\n          pokemons: results,\n          filteredPokemons: results\n        });\n      });\n\n      await this.applyFilter();\n  }\n\n  showDetails = (pokemon) => {\n    this.setState({\n      ...this.state,\n      desplayDetails: true,\n      selectedPokemon: pokemon,\n      selectedPokemonID: pokemon.id\n    });\n  }\n\n  loadMore = async () => {\n    await this.setState((prev) => {\n      return {\n        ...prev,\n        chunkSize: prev.chunkSize + 12\n      };\n    });\n\n    await this.getData();\n  }\n\n  updateFilter = async () => {\n    await this.setState({\n      ...this.state,\n      currentFilter: this.selectRef.current.value\n    });\n\n    await this.applyFilter();\n  }\n\n  applyFilter = async () => {\n    const filtered = !this.state.currentFilter\n      ? this.state.pokemons\n      : [...this.state.pokemons].filter(({ types }) => types.some(element => element === this.state.currentFilter));\n\n    await this.setState({\n      ...this.state,\n      filteredPokemons: filtered\n    });\n  }\n\n  render() {\n    const { filteredPokemons } = this.state;\n\n    return (\n      <React.Fragment>\n        <header>\n          <h1 className='header'>Pokedex</h1>\n        </header>\n\n        <div className='data'>\n          <div className='pokemons'>\n            <ul className='pokemon-list'>\n              {\n                filteredPokemons\n                  ? filteredPokemons.map(pokemon => <PokemonCard {...pokemon} showDetails={this.showDetails} selectedPokemonID={this.state.selectedPokemonID} key={pokemon.id} />)\n                  : null\n              }\n            </ul>\n            <button className='load-more' onClick={this.loadMore}>Load More</button>\n          </div>\n          <div className='pokemon-details'>\n            <div className='filter'>\n              <select onChange={this.updateFilter} ref={this.selectRef}>\n                <option value=\"\">All</option>\n                <option value=\"normal\">Normal</option>\n                <option value=\"fighting\">Fighting</option>\n                <option value=\"flying\">Flying</option>\n                <option value=\"poison\">Poison</option>\n                <option value=\"ground\">Ground</option>\n                <option value=\"rock\">Rock</option>\n                <option value=\"bug\">Bug</option>\n                <option value=\"steel\">Steel</option>\n                <option value=\"fire\">Fire</option>\n                <option value=\"water\">Water</option>\n                <option value=\"grass\">Grass</option>\n                <option value=\"electric\">Electric</option>\n                <option value=\"psychic\">Psychic</option>\n                <option value=\"ice\">Ice</option>\n                <option value=\"dragon\">Dragon</option>\n                <option value=\"dark\">Dark</option>\n                <option value=\"fairy\">Fairy</option>\n                <option value=\"unknown\">Unknown</option>\n                <option value=\"shadow\">Shadow</option>\n              </select>\n            </div>\n            {\n              this.state.desplayDetails\n                ? <PokemonDetails {...this.state.selectedPokemon} />\n                : null\n            }\n          </div>\n        </div>\n\n      </React.Fragment>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}